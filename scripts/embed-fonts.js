#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

function readBase64(p) {
  const abs = path.join(process.cwd(), p);
  if (!fs.existsSync(abs)) {
    console.error(`File not found: ${abs}`);
    process.exit(1);
  }
  const buf = fs.readFileSync(abs);
  return buf.toString('base64');
}

function writeEmbeddedModule(regB64, boldB64) {
  const target = path.join(process.cwd(), 'src/server/embeddedFonts.ts');
  const s = `// Generated by scripts/embed-fonts.js
function base64ToUint8Array(base64: string): Uint8Array {
  const bin = Buffer.from(base64, 'base64');
  return new Uint8Array(bin);
}

export const NOTO_SANS_REGULAR_B64 = '${regB64}';
export const NOTO_SANS_BOLD_B64 = '${boldB64}';

export function getEmbeddedRegularFont(): Uint8Array | null {
  if (!NOTO_SANS_REGULAR_B64) return null;
  try { return base64ToUint8Array(NOTO_SANS_REGULAR_B64); } catch { return null; }
}

export function getEmbeddedBoldFont(): Uint8Array | null {
  if (!NOTO_SANS_BOLD_B64) return null;
  try { return base64ToUint8Array(NOTO_SANS_BOLD_B64); } catch { return null; }
}
`;
  fs.writeFileSync(target, s);
}

const regular = readBase64('public/fonts/NotoSans-Regular.ttf');
const bold = readBase64('public/fonts/NotoSans-Bold.ttf');
writeEmbeddedModule(regular, bold);
console.log('Embedded fonts updated:', {
  regularSize: regular.length,
  boldSize: bold.length,
});


